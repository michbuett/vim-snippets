###########################################################################
#                         Basic JavaScript Snippets                       #
###########################################################################

snippet :fn "function fname (...) {...} "
function ${1:function_name} (${2:argument}) {
    ${0:// body...}
}
endsnippet

snippet :fo "fname: function (...) {...}"
${1:method_name}: function (${3:attribute}) {
	$0
}${10:,}
endsnippet

snippet :for "for (...) {...}"
var ${1:i}, ${2:l};
for ($1 = 0, $2 = ${3:Things}.length; $1 < $2; $1++) {
	${4:$3[$1]}$0
}
endsnippet

snippet :if "if (...) {...}"
if (${1:true}) {
    $0
}
endsnippet

snippet :code "code block: <code>...</code>"
<code>$0</code>
endsnippet

snippet :param "jsDoc parameter description"
@param {${1:type}} ${2:name} ${3:description}
endsnippet


###########################################################################
#                             Jasmine Snippets                            #
###########################################################################

snippet :desc "describe('...', function () {...}"
describe('${1:Description of test suite}', function () {
    $0
});
endsnippet

snippet :ba "beforeEach(...); afterEach(...);"
beforeEach(function () {
    ${1:// prepare code...}
});
afterEach(function () {
    ${2://cleanup code...}
});
endsnippet

snippet :it "it('...', function () {...});"
it('${1:description}', function () {
    // prepare
    $2
    // execute
    $3
    // verify
    $4
});
endsnippet

snippet :mock "SB.mockGlobals({...});"
SB.mockGlobals({
    'GL.global.messages': jasmine.createSpyObj('messages', ['on', 'off', 'trigger'])
});
endsnippet

snippet :restore "SB.restoreGlobals();"
SB.restoreGlobals();
endsnippet


###########################################################################
#                     JavaScript Snippets for alchemy.js                  #
###########################################################################

snippet :potion "A new potion for alchemy.js"
(function () {
    'use strict';

    var alchemy = require('./Alchemy.js');

    /**
     * ${3:Description}
     *
     * @class
     * @name ${1:Potion}
     * @extends ${2:alchemy.core.MateriaPrima}
     */
    alchemy.formula.add({
        name: '$1',
        extend: '$2',
        overrides: {
            /** @lends $1.prototype */

            ${4}
        }
    });
}());
endsnippet

snippet :or "Add a new magic method which has a reference to its superclass"
/**
 * ${4:Description}
 * @function
 */
${1:fn}: alchemy.override(function (_super) {
    return function () {
        _super.call(this);
    };
}),
endsnippet

# vim:ft=snippets:
